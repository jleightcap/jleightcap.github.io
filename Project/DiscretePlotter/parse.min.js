var Tokens;(function(Tokens){Tokens[Tokens["LPAREN"]=0]="LPAREN";Tokens[Tokens["RPAREN"]=1]="RPAREN";Tokens[Tokens["LIT_VAR"]=2]="LIT_VAR";Tokens[Tokens["LIT_NUMBER"]=3]="LIT_NUMBER";Tokens[Tokens["UNIOP_SIN"]=4]="UNIOP_SIN";Tokens[Tokens["UNIOP_COS"]=5]="UNIOP_COS";Tokens[Tokens["UNIOP_LN"]=6]="UNIOP_LN";Tokens[Tokens["BINOP_PLUS"]=7]="BINOP_PLUS";Tokens[Tokens["BINOP_MINUS"]=8]="BINOP_MINUS";Tokens[Tokens["BINOP_MUL"]=9]="BINOP_MUL";Tokens[Tokens["BINOP_DIV"]=10]="BINOP_DIV"})(Tokens||(Tokens={}));var ExprType;(function(ExprType){ExprType[ExprType["LITERAL"]=0]="LITERAL";ExprType[ExprType["OPERATOR"]=1]="OPERATOR";ExprType[ExprType["VARIABLE"]=2]="VARIABLE"})(ExprType||(ExprType={}));var Token_Map={"(":{type:Tokens.LPAREN},")":{type:Tokens.RPAREN},pi:{type:Tokens.LIT_NUMBER,value:Math.PI},e:{type:Tokens.LIT_NUMBER,value:Math.E},sin:{type:Tokens.UNIOP_SIN},cos:{type:Tokens.UNIOP_COS},ln:{type:Tokens.UNIOP_LN},"+":{type:Tokens.BINOP_PLUS},"-":{type:Tokens.BINOP_MINUS},"*":{type:Tokens.BINOP_MUL},"/":{type:Tokens.BINOP_DIV}};function expression(s){var toks=tokenize(s);console.log(toks);var expr=parse(toks);return lambda_expr(expr)}function lambda_expr(expr){switch(expr.type){case ExprType.VARIABLE:return function(x){return x};case ExprType.LITERAL:return function(_){return expr.body};case ExprType.OPERATOR:return function(x){return x}}}function parse(toks){if(toks.length==0)return null;var tok=toks[0];var rest=toks.slice(1);switch(tok.type){case Tokens.LPAREN:var _a=parse_sublist(rest),sl=_a[0],tail=_a[1];assert(tail.length==0,"parse: unexpected extra tokens");return{type:ExprType.OPERATOR,body:{op:tok,args:sl}};case Tokens.LIT_NUMBER:return{type:ExprType.LITERAL,body:tok.value};case Tokens.LIT_VAR:return{type:ExprType.VARIABLE,body:tok.name};default:log("parse: unexpected token: "+toks[0].type)}}function parse_sublist(toks){var balance=1;var sublist=[];for(var ii=0;ii<toks.length;ii++){var tok=toks[ii];switch(toks[ii].type){case Tokens.LPAREN:var _a=parse_sublist(toks.slice(ii+1)),sl=_a[0],tail=_a[1];assert(tail.length==0,"parse: unexpected leftover tokens");sublist.push(sl);ii+=sl.length;balance++;break;case Tokens.RPAREN:balance--;break;default:sublist.push(tok);break}if(balance==0)return[sublist,toks.slice(ii)]}log("parse: unbalanced parens")}function tok_tag(lexeme){if(/\d+|\d+.\d+/.test(lexeme)){return{type:Tokens.LIT_NUMBER,value:+lexeme}}else if(lexeme in Token_Map){return Token_Map[lexeme]}else if(/\w+/.test(lexeme)){return{type:Tokens.LIT_VAR,name:lexeme}}else{log("tokenize: unexpected lexeme "+lexeme)}}var re_tok=/\(|\)|\d+\.\d|\d+|\+|\-|\*|\/|sin|cos|ln|pi|e|\w+/g;function tokenize(s){s=s.trim();var _a=s.split("="),_=_a[0],def=_a[1];var toks=def.match(re_tok).map(tok_tag);return toks}function log(msg){var result=document.getElementById("parse_result");result.innerText=msg}function assert(cond,msg){if(!cond){log(msg)}else{log("")}}
